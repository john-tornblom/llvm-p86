Module Test;

$include (triangle.i86)

Program TriangleTest;
   var
      n	: longint;
   
   Function RunTestSuite: boolean;
   var
      error : boolean;
   begin
      error := false;

      if TrianglePerimeter(1, 1, 1) <> 3 then
	 error := true;
      
      if TrianglePerimeter(-1, 1, 1) <> -1 then
	 error := true;

      if TrianglePerimeter(1, -1, 1) <> -1 then
	 error := true;

      if TrianglePerimeter(1, 1, -1) <> -1 then
	 error := true;


       if TrianglePerimeter(0, 1, 1) <> -1 then
	 error := true;

      if TrianglePerimeter(1, 0, 1) <> -1 then
	 error := true;

      if TrianglePerimeter(1, 1, 0) <> -1 then
	 error := true;
      
      
      if TriangleArea(0, 1, 1) <> -1 then
	 error := true;

      if TriangleArea(1, 0, 1) <> -1 then
	 error := true;

      if TriangleArea(1, 1, 0) <> -1 then
	 error := true;

      if TriangleArea(12, 16, 20) <> 96 then
	 error := true;
      
      if TriangleArea(0, 0, 0) <> -1 then
	 error := true;

      if TriangleType(1, 1, 1) <> EQU then
	 error := true;

      if TriangleType(2, 2, 1) <> ISO then
	 error := true;

      if TriangleType(2, 1, 2) <> ISO then
	 error := true;

      if TriangleType(1, 2, 2) <> ISO then
	 error := true;

      if TriangleType(4, 3, 2) <> SCA then
	 error := true;

      if TriangleType(4201476, 4201476, 2145527840) <> ERR then
	 error := true;

      if TriangleType(681740491, 1534703449, 681740491) <> ERR then
	 error := true;

      if TriangleType(2, 1, 1) <> ERR then
	 error := true;

      if TriangleType(1, 1, 2) <> ERR then
	 error := true;

      if TriangleType(-1, 1, 1) <> ERR then
	 error := true;

      if TriangleType(1, -1, 1) <> ERR then
	 error := true;

      if TriangleType(1, 1, -1) <> ERR then
	 error := true;

      if TriangleType(1, 1, 0) <> ERR then
	 error := true;

      if TriangleType(0, 1, 1) <> ERR then
	 error := true;

      if TriangleType(1, 0, 1) <> ERR then
	 error := true;

      if TriangleType(2, 1, 3) <> ERR then
	 error := true;

      if TriangleType(2, 3, 1) <> ERR then
	 error := true;

      if TriangleType(3, 2, 1) <> ERR then
	 error := true;

      if TriangleType(1, 2, 4) <> ERR then
	 error := true;
   
      if TriangleType(4, 2, 1) <> ERR then
	 error := true;

      if TriangleType(2, 4, 1) <> ERR then
	 error := true;
   
      RunTestSuite := error;
   end; { RunTestSuite }
begin
   { If no argument, print the number of mutants }
   if ParamCount = 0 then begin
      WriteLn(GetMutationCount);
      Halt(0);
   end;

   n := ord(ParamStr(1));
   SetMutation(n);
   
   WriteLn(GetMutationId);
   if RunTestSuite then
      halt(1)
   else
      halt(0);
end.

{ Local Variables: }
{ mode: pascal }
{ End: }
